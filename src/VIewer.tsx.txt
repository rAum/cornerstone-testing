import { useEffect, useId, useRef } from 'react'

import {
  RenderingEngine,
  Enums,
  init as csInit,
  volumeLoader,
  setVolumesForViewports,
  setUseCPURendering,
} from '@cornerstonejs/core'
import { cornerstoneNiftiImageVolumeLoader } from '@cornerstonejs/nifti-volume-loader'

import {
  ToolGroupManager,
  StackScrollMouseWheelTool,
  ZoomTool,
  Enums as csToolsEnums,
  WindowLevelTool,
  PanTool,
  addTool as cornerstoneToolsAddTool,
  init as csTools3dInit,
} from '@cornerstonejs/tools'

// // // const { ViewportType } = Enums
const { MouseBindings } = csToolsEnums

// // //////////////////////////////////////////////

const toolGroupId = 'STACK_TOOL_GROUP_ID'

// //////////////////////////////////////////////
const windowWidth = 800
const windowCenter = 500

const lower = windowCenter - windowWidth / 2.0
const upper = windowCenter + windowWidth / 2.0

csTools3dInit()

function setCtTransferFunctionForVolumeActor({ volumeActor }: { volumeActor: any }) {
  volumeActor.getProperty().getRGBTransferFunction(0).setMappingRange(lower, upper)
}
// //////////////////////////////////////////////

const viewportId1 = 'CT_NIFTI_AXIAL'
const viewportId2 = 'CT_NIFTI_SAGITTAL'
const viewportId3 = 'CT_NIFTI_CORONAL'

const viewportIds = [viewportId1, viewportId2, viewportId3]

let added = false

function setTools(renderingEngineId: any) {
  if (added) {
    return
  }
  added = true
  // Add tools to Cornerstone3D
  cornerstoneToolsAddTool(WindowLevelTool)
  cornerstoneToolsAddTool(PanTool)
  cornerstoneToolsAddTool(StackScrollMouseWheelTool)
  cornerstoneToolsAddTool(ZoomTool)

  // Define a tool group, which defines how mouse events map to tool commands for
  // Any viewport using the group
  const toolGroup = ToolGroupManager.createToolGroup(toolGroupId)!

  // Add the tools to the tool group and specify which volume they are pointing at
  toolGroup.addTool(WindowLevelTool.toolName)
  toolGroup.addTool(PanTool.toolName)
  toolGroup.addTool(ZoomTool.toolName)
  toolGroup.addTool(StackScrollMouseWheelTool.toolName)

  // Set the initial state of the tools, here we set one tool active on left click.
  // This means left click will draw that tool.
  toolGroup.setToolActive(WindowLevelTool.toolName, {
    bindings: [
      {
        mouseButton: MouseBindings.Primary, // Left Click
      },
    ],
  })

  toolGroup.setToolActive(ZoomTool.toolName, {
    bindings: [
      {
        mouseButton: MouseBindings.Secondary, // Right Click
      },
    ],
  })
  toolGroup.setToolActive(PanTool.toolName, {
    bindings: [
      {
        mouseButton: MouseBindings.Auxiliary, // Right Click
      },
    ],
  })

  // As the Stack Scroll mouse wheel is a tool using the `mouseWheelCallback`
  // hook instead of mouse buttons, it does not need to assign any mouse button.
  toolGroup.setToolActive(StackScrollMouseWheelTool.toolName)

  // Set the tool group on the viewports
  viewportIds.forEach(viewportId => toolGroup.addViewport(viewportId, renderingEngineId))
}

async function setup(niftiURL: string, element1: any, element2: any, element3: any) {
  setUseCPURendering(false) // chuje leca w kulki, nie dziala fallback do cpu :|
  await csInit()
  // await csTools3dInit() // !!! This is destroying prod build! Moved to main.tsx ...
  console.log('Cornerstone initialized')
  volumeLoader.registerVolumeLoader('nifti', cornerstoneNiftiImageVolumeLoader)

  console.log(niftiURL)
  const volumeId = 'nifti:' + niftiURL

  console.time('Loading volume')
  const volume = await volumeLoader.createAndCacheVolume(volumeId)
  console.timeEnd('Loading volume')
  console.log('Volume loaded')
  console.log(volume)

  const renderingEngineId = 'myRenderingEngine'
  const renderingEngine = new RenderingEngine(renderingEngineId)

  const viewportInputArray = [
    {
      viewportId: viewportId1,
      type: Enums.ViewportType.ORTHOGRAPHIC,
      element: element1,
      defaultOptions: {
        orientation: Enums.OrientationAxis.AXIAL,
      },
    },
    {
      viewportId: viewportId2,
      type: Enums.ViewportType.ORTHOGRAPHIC,
      element: element2,
      defaultOptions: {
        orientation: Enums.OrientationAxis.SAGITTAL,
      },
    },
    {
      viewportId: viewportId3,
      type: Enums.ViewportType.ORTHOGRAPHIC,
      element: element3,
      defaultOptions: {
        orientation: Enums.OrientationAxis.CORONAL,
      },
    },
  ]
  renderingEngine.setViewports(viewportInputArray)
  console.log('Setting up viewports done')

  setTools(renderingEngineId)
  console.log('Setting up tools done')

  setVolumesForViewports(
    renderingEngine,
    [{ volumeId, callback: setCtTransferFunctionForVolumeActor }],
    viewportInputArray.map(v => v.viewportId)
  )

  renderingEngine.render()
}

interface NiftiViewerProps {
  niftiURL: string
}

const NiftiViewer = ({ niftiURL }: NiftiViewerProps) => {
  const id = useId()
  const ref = useRef(false)
  useEffect(() => {
    // to ensure this is only called once
    // I don't know how to reset this
    if (ref.current) {
      return
    }
    ref.current = true

    const element1 = document.getElementById(viewportId1)
    const element2 = document.getElementById(viewportId2)
    const element3 = document.getElementById(viewportId3)

    setup(niftiURL, element1, element2, element3)
  }, [id, niftiURL])

  const containerId = useId()

  useEffect(() => {
    // disable context menu
    const element = document.getElementById(containerId)
    if (element) {
      const eventHandler = function (e) {
        e.preventDefault()
      }
      element.addEventListener('contextmenu', eventHandler)
      return () => {
        element.removeEventListener('contextmenu', eventHandler)
      }
    }
  }, [containerId])

  return (
    <Flex flexGrow={1} height={'100%'} gap={2} id={containerId}>
      <View height={'100%'} position="relative" flexGrow={1} borderColor={'green-400'} borderWidth="thin">
        <View UNSAFE_className="absolute top-0 left-0" id={viewportId1} height={'100%'} width={'100%'} />
        <Text UNSAFE_className="absolute bottom-0 left-0 dark:bg-green-500 bg-green-500 p-25 pe-50 rounded-se-large">
          AXIAL
        </Text>
      </View>

      <View height={'100%'} position="relative" flexGrow={1} borderColor={'yellow-400'} borderWidth="thin">
        <View UNSAFE_className="absolute top-0 left-0" id={viewportId2} height={'100%'} width={'100%'} />
        <Text UNSAFE_className="absolute bottom-0 left-0 dark:bg-yellow-600 bg-yellow-500 p-25 pe-50 rounded-se-large">
          SAGITTAL
        </Text>
      </View>

      <View height={'100%'} position="relative" flexGrow={1} borderColor={'red-400'} borderWidth="thin">
        <View UNSAFE_className="absolute top-0 left-0" id={viewportId3} height={'100%'} width={'100%'} />
        <Text UNSAFE_className="absolute bottom-0 left-0 bg-red-600 dark:bg-red-500 p-25 pe-50 rounded-se-large">
          CORONAL
        </Text>
      </View>
    </Flex>
  )
}

export default NiftiViewer
